// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"talkservice"
)

var _ = talkservice.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void tryFriendRequest(string midOrEMid, Method_ method, string friendRequestParams)")
  fmt.Fprintln(os.Stderr, "  void updateExtendedProfileAttribute(i32 reqSeq, UpdateExtendedProfileAttributeAttr attr, ExtendedProfile extendedProfile)")
  fmt.Fprintln(os.Stderr, "  void verifyAccountMigration(string migrationSessionId)")
  fmt.Fprintln(os.Stderr, "  void reportLocation(Geolocation location, Trigger trigger, ClientNetworkStatus networkStatus)")
  fmt.Fprintln(os.Stderr, "   getPaidCallBalanceList(string language)")
  fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest requests)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, MIDType type, string reference)")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "  GetFollowersResponse getFollowers(GetFollowersRequest getFollowersRequest)")
  fmt.Fprintln(os.Stderr, "   getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr, "  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  void removeChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, i64 announcementSeq)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  IdentityCredentialResponse updatePassword(string authSessionId, IdentityCredentialRequest request)")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id, string reference)")
  fmt.Fprintln(os.Stderr, "  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void requestCleanupUserProvidedData( dataTypes)")
  fmt.Fprintln(os.Stderr, "  BuddyStatusBar getBuddyStatusBarV2(GetBuddyStatusBarV2Request request)")
  fmt.Fprintln(os.Stderr, "  PaidCallHistoryResult getPaidCallHistory(i64 start, i32 size, string language)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  Group createGroupV2(i32 seq, string name,  contactIds)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones, string reference)")
  fmt.Fprintln(os.Stderr, "   getAcceptedProximityMatches(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncementsBulk( chatRoomMids, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getCountries(CountryGroup countryGroup)")
  fmt.Fprintln(os.Stderr, "  GetFollowingsResponse getFollowings(GetFollowingsRequest getFollowingsRequest)")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "  i64 getRingbackTone()")
  fmt.Fprintln(os.Stderr, "  RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void report(i64 syncOpRevision, ReportCategory category, string report)")
  fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, Group group)")
  fmt.Fprintln(os.Stderr, "   findBuddyContactsByQuery(string language, string country, string query, i32 fromIndex, i32 count, RequestsSource requestSource)")
  fmt.Fprintln(os.Stderr, "  PaidCallMetadataResult getPaidCallMetadata(string language)")
  fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncements(string chatRoomMids)")
  fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
  fmt.Fprintln(os.Stderr, "   getFriendRequests(Direction direction, i64 lastSeenSeqId)")
  fmt.Fprintln(os.Stderr, "  Ringtone getRingtone()")
  fmt.Fprintln(os.Stderr, "  void updateProfile(i32 reqSeq, Profile profile)")
  fmt.Fprintln(os.Stderr, "  void notifySleep(i64 lastRev, i32 badge)")
  fmt.Fprintln(os.Stderr, "  string registerWithSnsIdAndIdentityCredential(SnSIdTyoe snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void removeFollower(RemoveFollowerRequest removeFollowerRequest)")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(Provider provider, string identifier, string locale)")
  fmt.Fprintln(os.Stderr, "  void sendEchoPush(string text)")
  fmt.Fprintln(os.Stderr, "  void unfollow(UnfollowRequest unfollowRequest)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroupCall(string chatMid,  memberMids, MediaType mediaType)")
  fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getChatRoomBGMs( chatRoomMids, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getE2EEGroupSharedKey(i32 keyVersion, string chatMid, i32 groupKeyId)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsInvited(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo, string udidHash, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  RegisterWithSnsIdResult registerWithSnsId(SnSIdTyoe snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  void removeFriendRequest(Direction direction, string midOrEMid)")
  fmt.Fprintln(os.Stderr, "  string openAuthSession(AuthSessionRequest request)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcodeWithE2EE(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, string encryptedKeyChain, string hashKeyChain)")
  fmt.Fprintln(os.Stderr, "  GetBalanceResponse getBalance(GetBalanceRequest request)")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(updateNotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  Room createRoomV2(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByMetaTag(string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsJoined(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getRoomsV2( roomIds)")
  fmt.Fprintln(os.Stderr, "  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  GroupCallRoute acquireGroupCallRoute(string chatMid, MediaType mediaType, bool isInitialHost,  capabilities)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketIdWithTag)")
  fmt.Fprintln(os.Stderr, "   getE2EEPublicKey(string mid, i32 keyVersion, i32 keyId)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithIdentityCredential(string sessionId, Provider provider, string identifier, string verifier, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  string reissueGroupTicket(string groupMid)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttributes(i32 reqSeq, UpdateProfileAttributesRequest request)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  string decryptFollowEMid(string eMid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string searchId)")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
  fmt.Fprintln(os.Stderr, "  bool wakeUpLongPolling(i64 clientRevision)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitationByTicket(i32 reqSeq, string groupMid, string ticketId)")
  fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
  fmt.Fprintln(os.Stderr, "   getGroupsV2( groupId)")
  fmt.Fprintln(os.Stderr, "   getGroups( groupId)")
  fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  Group getCompactGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  Group getGroupWithoutMembers(string groupId)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "   getMessageReadRange( chatIds, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes2( attributesToRetrieve)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  ChatRoomBGM updateChatRoomBGM(i32 reqSeq, string chatRoomMid, string chatRoomBGMInfo)")
  fmt.Fprintln(os.Stderr, "  Group findGroupByTicket(string ticketId)")
  fmt.Fprintln(os.Stderr, "  FriendRequestsInfo getRecentFriendRequests(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes(i32 attrBitset)")
  fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
  fmt.Fprintln(os.Stderr, "   updateSettingsAttributes2(i32 reqSeq,  attributesToUpdate, Settings settings)")
  fmt.Fprintln(os.Stderr, "  ContactRegistration getContactRegistration(string id, MIDType type)")
  fmt.Fprintln(os.Stderr, "  Settings getSettings(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void noop()")
  fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactFlag flag, string value)")
  fmt.Fprintln(os.Stderr, "  GroupCall getGroupCall(string chatMid)")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
  fmt.Fprintln(os.Stderr, "  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  ExtendedProfile getExtendedProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureType featureType)")
  fmt.Fprintln(os.Stderr, "  ChatRoomAnnouncement createChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents)")
  fmt.Fprintln(os.Stderr, "  Contact findAndAddContactByMetaTag(i32 reqSeq, string searchId, string reference)")
  fmt.Fprintln(os.Stderr, "  void follow(FollowRequest followRequest)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  IdentityCredentialResponse updateIdentifier(string authSessionId, IdentityCredentialRequest request)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := talkservice.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "tryFriendRequest":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TryFriendRequest requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Method_(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TryFriendRequest(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateExtendedProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateExtendedProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err385 := (strconv.Atoi(flag.Arg(1)))
    if err385 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.UpdateExtendedProfileAttributeAttr(tmp1)
    value1 := argvalue1
    arg386 := flag.Arg(3)
    mbTrans387 := thrift.NewTMemoryBufferLen(len(arg386))
    defer mbTrans387.Close()
    _, err388 := mbTrans387.WriteString(arg386)
    if err388 != nil {
      Usage()
      return
    }
    factory389 := thrift.NewTJSONProtocolFactory()
    jsProt390 := factory389.GetProtocol(mbTrans387)
    argvalue2 := talkservice.NewExtendedProfile()
    err391 := argvalue2.Read(jsProt390)
    if err391 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateExtendedProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyAccountMigration":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "VerifyAccountMigration requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.VerifyAccountMigration(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reportLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReportLocation requires 3 args")
      flag.Usage()
    }
    arg393 := flag.Arg(1)
    mbTrans394 := thrift.NewTMemoryBufferLen(len(arg393))
    defer mbTrans394.Close()
    _, err395 := mbTrans394.WriteString(arg393)
    if err395 != nil {
      Usage()
      return
    }
    factory396 := thrift.NewTJSONProtocolFactory()
    jsProt397 := factory396.GetProtocol(mbTrans394)
    argvalue0 := talkservice.NewGeolocation()
    err398 := argvalue0.Read(jsProt397)
    if err398 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Trigger(tmp1)
    value1 := argvalue1
    arg399 := flag.Arg(3)
    mbTrans400 := thrift.NewTMemoryBufferLen(len(arg399))
    defer mbTrans400.Close()
    _, err401 := mbTrans400.WriteString(arg399)
    if err401 != nil {
      Usage()
      return
    }
    factory402 := thrift.NewTJSONProtocolFactory()
    jsProt403 := factory402.GetProtocol(mbTrans400)
    argvalue2 := talkservice.NewClientNetworkStatus()
    err404 := argvalue2.Read(jsProt403)
    if err404 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ReportLocation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getPaidCallBalanceList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallBalanceList requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallBalanceList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
      flag.Usage()
    }
    arg406 := flag.Arg(1)
    mbTrans407 := thrift.NewTMemoryBufferLen(len(arg406))
    defer mbTrans407.Close()
    _, err408 := mbTrans407.WriteString(arg406)
    if err408 != nil {
      Usage()
      return
    }
    factory409 := thrift.NewTJSONProtocolFactory()
    jsProt410 := factory409.GetProtocol(mbTrans407)
    argvalue0 := talkservice.NewCreateChatRequest()
    err411 := argvalue0.Read(jsProt410)
    if err411 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err412 := (strconv.Atoi(flag.Arg(1)))
    if err412 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.MIDType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err415 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err415 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err416 := (strconv.Atoi(flag.Arg(2)))
    if err416 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg417 := flag.Arg(1)
    mbTrans418 := thrift.NewTMemoryBufferLen(len(arg417))
    defer mbTrans418.Close()
    _, err419 := mbTrans418.WriteString(arg417)
    if err419 != nil { 
      Usage()
      return
    }
    factory420 := thrift.NewTJSONProtocolFactory()
    jsProt421 := factory420.GetProtocol(mbTrans418)
    containerStruct0 := talkservice.NewTalkServiceGetContactsArgs()
    err422 := containerStruct0.ReadField1(jsProt421)
    if err422 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowers requires 1 args")
      flag.Usage()
    }
    arg423 := flag.Arg(1)
    mbTrans424 := thrift.NewTMemoryBufferLen(len(arg423))
    defer mbTrans424.Close()
    _, err425 := mbTrans424.WriteString(arg423)
    if err425 != nil {
      Usage()
      return
    }
    factory426 := thrift.NewTJSONProtocolFactory()
    jsProt427 := factory426.GetProtocol(mbTrans424)
    argvalue0 := talkservice.NewGetFollowersRequest()
    err428 := argvalue0.Read(jsProt427)
    if err428 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err430 := (strconv.Atoi(flag.Arg(1)))
    if err430 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyRegistrationComplete":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyRegistrationComplete requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyRegistrationComplete(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeChatRoomAnnouncement":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RemoveChatRoomAnnouncement requires 3 args")
      flag.Usage()
    }
    tmp0, err434 := (strconv.Atoi(flag.Arg(1)))
    if err434 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err436 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err436 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RemoveChatRoomAnnouncement(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 4 args")
      flag.Usage()
    }
    tmp0, err437 := (strconv.Atoi(flag.Arg(1)))
    if err437 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err440 := (strconv.Atoi(flag.Arg(4)))
    if err440 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updatePassword":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdatePassword requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg442 := flag.Arg(2)
    mbTrans443 := thrift.NewTMemoryBufferLen(len(arg442))
    defer mbTrans443.Close()
    _, err444 := mbTrans443.WriteString(arg442)
    if err444 != nil {
      Usage()
      return
    }
    factory445 := thrift.NewTJSONProtocolFactory()
    jsProt446 := factory445.GetProtocol(mbTrans443)
    argvalue1 := talkservice.NewIdentityCredentialRequest()
    err447 := argvalue1.Read(jsProt446)
    if err447 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdatePassword(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 3 args")
      flag.Usage()
    }
    tmp0, err448 := (strconv.Atoi(flag.Arg(1)))
    if err448 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnblockContact(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredentialWithResult":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredentialWithResult_ requires 2 args")
      flag.Usage()
    }
    arg451 := flag.Arg(1)
    mbTrans452 := thrift.NewTMemoryBufferLen(len(arg451))
    defer mbTrans452.Close()
    _, err453 := mbTrans452.WriteString(arg451)
    if err453 != nil {
      Usage()
      return
    }
    factory454 := thrift.NewTJSONProtocolFactory()
    jsProt455 := factory454.GetProtocol(mbTrans452)
    argvalue0 := talkservice.NewIdentityCredential()
    err456 := argvalue0.Read(jsProt455)
    if err456 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyIdentityCredentialWithResult_(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "requestCleanupUserProvidedData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestCleanupUserProvidedData requires 1 args")
      flag.Usage()
    }
    arg458 := flag.Arg(1)
    mbTrans459 := thrift.NewTMemoryBufferLen(len(arg458))
    defer mbTrans459.Close()
    _, err460 := mbTrans459.WriteString(arg458)
    if err460 != nil { 
      Usage()
      return
    }
    factory461 := thrift.NewTJSONProtocolFactory()
    jsProt462 := factory461.GetProtocol(mbTrans459)
    containerStruct0 := talkservice.NewTalkServiceRequestCleanupUserProvidedDataArgs()
    err463 := containerStruct0.ReadField1(jsProt462)
    if err463 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.DataTypes
    value0 := argvalue0
    fmt.Print(client.RequestCleanupUserProvidedData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBuddyStatusBarV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBuddyStatusBarV2 requires 1 args")
      flag.Usage()
    }
    arg464 := flag.Arg(1)
    mbTrans465 := thrift.NewTMemoryBufferLen(len(arg464))
    defer mbTrans465.Close()
    _, err466 := mbTrans465.WriteString(arg464)
    if err466 != nil {
      Usage()
      return
    }
    factory467 := thrift.NewTJSONProtocolFactory()
    jsProt468 := factory467.GetProtocol(mbTrans465)
    argvalue0 := talkservice.NewGetBuddyStatusBarV2Request()
    err469 := argvalue0.Read(jsProt468)
    if err469 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetBuddyStatusBarV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPaidCallHistory":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPaidCallHistory requires 3 args")
      flag.Usage()
    }
    argvalue0, err470 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err470 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err471 := (strconv.Atoi(flag.Arg(2)))
    if err471 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPaidCallHistory(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err473 := (strconv.Atoi(flag.Arg(1)))
    if err473 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createGroupV2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateGroupV2 requires 3 args")
      flag.Usage()
    }
    tmp0, err475 := (strconv.Atoi(flag.Arg(1)))
    if err475 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg477 := flag.Arg(3)
    mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
    defer mbTrans478.Close()
    _, err479 := mbTrans478.WriteString(arg477)
    if err479 != nil { 
      Usage()
      return
    }
    factory480 := thrift.NewTJSONProtocolFactory()
    jsProt481 := factory480.GetProtocol(mbTrans478)
    containerStruct2 := talkservice.NewTalkServiceCreateGroupV2Args()
    err482 := containerStruct2.ReadField3(jsProt481)
    if err482 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CreateGroupV2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 3 args")
      flag.Usage()
    }
    tmp0, err483 := (strconv.Atoi(flag.Arg(1)))
    if err483 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg484 := flag.Arg(2)
    mbTrans485 := thrift.NewTMemoryBufferLen(len(arg484))
    defer mbTrans485.Close()
    _, err486 := mbTrans485.WriteString(arg484)
    if err486 != nil { 
      Usage()
      return
    }
    factory487 := thrift.NewTJSONProtocolFactory()
    jsProt488 := factory487.GetProtocol(mbTrans485)
    containerStruct1 := talkservice.NewTalkServiceFindAndAddContactsByPhoneArgs()
    err489 := containerStruct1.ReadField2(jsProt488)
    if err489 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAcceptedProximityMatches":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAcceptedProximityMatches requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAcceptedProximityMatches(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncementsBulk":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncementsBulk requires 2 args")
      flag.Usage()
    }
    arg492 := flag.Arg(1)
    mbTrans493 := thrift.NewTMemoryBufferLen(len(arg492))
    defer mbTrans493.Close()
    _, err494 := mbTrans493.WriteString(arg492)
    if err494 != nil { 
      Usage()
      return
    }
    factory495 := thrift.NewTJSONProtocolFactory()
    jsProt496 := factory495.GetProtocol(mbTrans493)
    containerStruct0 := talkservice.NewTalkServiceGetChatRoomAnnouncementsBulkArgs()
    err497 := containerStruct0.ReadField1(jsProt496)
    if err497 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatRoomMids
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetChatRoomAnnouncementsBulk(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCountries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCountries requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.CountryGroup(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCountries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFollowings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFollowings requires 1 args")
      flag.Usage()
    }
    arg498 := flag.Arg(1)
    mbTrans499 := thrift.NewTMemoryBufferLen(len(arg498))
    defer mbTrans499.Close()
    _, err500 := mbTrans499.WriteString(arg498)
    if err500 != nil {
      Usage()
      return
    }
    factory501 := thrift.NewTJSONProtocolFactory()
    jsProt502 := factory501.GetProtocol(mbTrans499)
    argvalue0 := talkservice.NewGetFollowingsRequest()
    err503 := argvalue0.Read(jsProt502)
    if err503 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFollowings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "getRingbackTone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRingbackTone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRingbackTone(context.Background()))
    fmt.Print("\n")
    break
  case "registerWithPhoneNumber":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterWithPhoneNumber requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterWithPhoneNumber(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "report":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Report requires 3 args")
      flag.Usage()
    }
    argvalue0, err506 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err506 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.ReportCategory(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.Report(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "unblockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err508 := (strconv.Atoi(flag.Arg(1)))
    if err508 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err510 := (strconv.Atoi(flag.Arg(1)))
    if err510 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg511 := flag.Arg(2)
    mbTrans512 := thrift.NewTMemoryBufferLen(len(arg511))
    defer mbTrans512.Close()
    _, err513 := mbTrans512.WriteString(arg511)
    if err513 != nil {
      Usage()
      return
    }
    factory514 := thrift.NewTJSONProtocolFactory()
    jsProt515 := factory514.GetProtocol(mbTrans512)
    argvalue1 := talkservice.NewGroup()
    err516 := argvalue1.Read(jsProt515)
    if err516 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findBuddyContactsByQuery":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "FindBuddyContactsByQuery requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err520 := (strconv.Atoi(flag.Arg(4)))
    if err520 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err521 := (strconv.Atoi(flag.Arg(5)))
    if err521 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err := (strconv.Atoi(flag.Arg(6)))
    if err != nil {
      Usage()
     return
    }
    argvalue5 := talkservice.RequestsSource(tmp5)
    value5 := argvalue5
    fmt.Print(client.FindBuddyContactsByQuery(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getPaidCallMetadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallMetadata requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "blockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err523 := (strconv.Atoi(flag.Arg(1)))
    if err523 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 3 args")
      flag.Usage()
    }
    tmp0, err525 := (strconv.Atoi(flag.Arg(1)))
    if err525 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllChatMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
      flag.Usage()
    }
    arg528 := flag.Arg(1)
    mbTrans529 := thrift.NewTMemoryBufferLen(len(arg528))
    defer mbTrans529.Close()
    _, err530 := mbTrans529.WriteString(arg528)
    if err530 != nil {
      Usage()
      return
    }
    factory531 := thrift.NewTJSONProtocolFactory()
    jsProt532 := factory531.GetProtocol(mbTrans529)
    argvalue0 := talkservice.NewGetAllChatMidsRequest()
    err533 := argvalue0.Read(jsProt532)
    if err533 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncements":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncements requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetChatRoomAnnouncements(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCountryWithRequestIp":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCountryWithRequestIp(context.Background()))
    fmt.Print("\n")
    break
  case "getFriendRequests":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFriendRequests requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Direction(tmp0)
    value0 := argvalue0
    argvalue1, err535 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err535 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetFriendRequests(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRingtone":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRingtone requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRingtone(context.Background()))
    fmt.Print("\n")
    break
  case "updateProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfile requires 2 args")
      flag.Usage()
    }
    tmp0, err536 := (strconv.Atoi(flag.Arg(1)))
    if err536 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg537 := flag.Arg(2)
    mbTrans538 := thrift.NewTMemoryBufferLen(len(arg537))
    defer mbTrans538.Close()
    _, err539 := mbTrans538.WriteString(arg537)
    if err539 != nil {
      Usage()
      return
    }
    factory540 := thrift.NewTJSONProtocolFactory()
    jsProt541 := factory540.GetProtocol(mbTrans538)
    argvalue1 := talkservice.NewProfile()
    err542 := argvalue1.Read(jsProt541)
    if err542 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifySleep":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifySleep requires 2 args")
      flag.Usage()
    }
    argvalue0, err543 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err543 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err544 := (strconv.Atoi(flag.Arg(2)))
    if err544 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.NotifySleep(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerWithSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsIdAndIdentityCredential requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SnSIdTyoe(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg546 := flag.Arg(3)
    mbTrans547 := thrift.NewTMemoryBufferLen(len(arg546))
    defer mbTrans547.Close()
    _, err548 := mbTrans547.WriteString(arg546)
    if err548 != nil {
      Usage()
      return
    }
    factory549 := thrift.NewTJSONProtocolFactory()
    jsProt550 := factory549.GetProtocol(mbTrans547)
    argvalue2 := talkservice.NewIdentityCredential()
    err551 := argvalue2.Read(jsProt550)
    if err551 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg554 := flag.Arg(6)
    mbTrans555 := thrift.NewTMemoryBufferLen(len(arg554))
    defer mbTrans555.Close()
    _, err556 := mbTrans555.WriteString(arg554)
    if err556 != nil {
      Usage()
      return
    }
    factory557 := thrift.NewTJSONProtocolFactory()
    jsProt558 := factory557.GetProtocol(mbTrans555)
    argvalue5 := talkservice.NewDeviceInfo()
    err559 := argvalue5.Read(jsProt558)
    if err559 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.RegisterWithSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "removeFollower":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveFollower requires 1 args")
      flag.Usage()
    }
    arg561 := flag.Arg(1)
    mbTrans562 := thrift.NewTMemoryBufferLen(len(arg561))
    defer mbTrans562.Close()
    _, err563 := mbTrans562.WriteString(arg561)
    if err563 != nil {
      Usage()
      return
    }
    factory564 := thrift.NewTJSONProtocolFactory()
    jsProt565 := factory564.GetProtocol(mbTrans562)
    argvalue0 := talkservice.NewRemoveFollowerRequest()
    err566 := argvalue0.Read(jsProt565)
    if err566 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveFollower(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Provider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendEchoPush":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendEchoPush requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SendEchoPush(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unfollow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unfollow requires 1 args")
      flag.Usage()
    }
    arg570 := flag.Arg(1)
    mbTrans571 := thrift.NewTMemoryBufferLen(len(arg570))
    defer mbTrans571.Close()
    _, err572 := mbTrans571.WriteString(arg570)
    if err572 != nil {
      Usage()
      return
    }
    factory573 := thrift.NewTJSONProtocolFactory()
    jsProt574 := factory573.GetProtocol(mbTrans571)
    argvalue0 := talkservice.NewUnfollowRequest()
    err575 := argvalue0.Read(jsProt574)
    if err575 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unfollow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroupCall":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroupCall requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg577 := flag.Arg(2)
    mbTrans578 := thrift.NewTMemoryBufferLen(len(arg577))
    defer mbTrans578.Close()
    _, err579 := mbTrans578.WriteString(arg577)
    if err579 != nil { 
      Usage()
      return
    }
    factory580 := thrift.NewTJSONProtocolFactory()
    jsProt581 := factory580.GetProtocol(mbTrans578)
    containerStruct1 := talkservice.NewTalkServiceInviteIntoGroupCallArgs()
    err582 := containerStruct1.ReadField2(jsProt581)
    if err582 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MemberMids
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.MediaType(tmp2)
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroupCall(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "cancelChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
      flag.Usage()
    }
    arg583 := flag.Arg(1)
    mbTrans584 := thrift.NewTMemoryBufferLen(len(arg583))
    defer mbTrans584.Close()
    _, err585 := mbTrans584.WriteString(arg583)
    if err585 != nil {
      Usage()
      return
    }
    factory586 := thrift.NewTJSONProtocolFactory()
    jsProt587 := factory586.GetProtocol(mbTrans584)
    argvalue0 := talkservice.NewCancelChatInvitationRequest()
    err588 := argvalue0.Read(jsProt587)
    if err588 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findChatByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindChatByTicket requires 1 args")
      flag.Usage()
    }
    arg589 := flag.Arg(1)
    mbTrans590 := thrift.NewTMemoryBufferLen(len(arg589))
    defer mbTrans590.Close()
    _, err591 := mbTrans590.WriteString(arg589)
    if err591 != nil {
      Usage()
      return
    }
    factory592 := thrift.NewTJSONProtocolFactory()
    jsProt593 := factory592.GetProtocol(mbTrans590)
    argvalue0 := talkservice.NewFindChatByTicketRequest()
    err594 := argvalue0.Read(jsProt593)
    if err594 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindChatByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetAllContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatRoomBGMs":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChatRoomBGMs requires 2 args")
      flag.Usage()
    }
    arg595 := flag.Arg(1)
    mbTrans596 := thrift.NewTMemoryBufferLen(len(arg595))
    defer mbTrans596.Close()
    _, err597 := mbTrans596.WriteString(arg595)
    if err597 != nil { 
      Usage()
      return
    }
    factory598 := thrift.NewTJSONProtocolFactory()
    jsProt599 := factory598.GetProtocol(mbTrans596)
    containerStruct0 := talkservice.NewTalkServiceGetChatRoomBGMsArgs()
    err600 := containerStruct0.ReadField1(jsProt599)
    if err600 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatRoomMids
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetChatRoomBGMs(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEGroupSharedKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEGroupSharedKey requires 3 args")
      flag.Usage()
    }
    tmp0, err601 := (strconv.Atoi(flag.Arg(1)))
    if err601 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err603 := (strconv.Atoi(flag.Arg(3)))
    if err603 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEGroupSharedKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getGroupIdsInvited":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetGroupIdsInvited(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyUpdated":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "NotifyUpdated requires 4 args")
      flag.Usage()
    }
    argvalue0, err604 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err604 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg605 := flag.Arg(2)
    mbTrans606 := thrift.NewTMemoryBufferLen(len(arg605))
    defer mbTrans606.Close()
    _, err607 := mbTrans606.WriteString(arg605)
    if err607 != nil {
      Usage()
      return
    }
    factory608 := thrift.NewTJSONProtocolFactory()
    jsProt609 := factory608.GetProtocol(mbTrans606)
    argvalue1 := talkservice.NewDeviceInfo()
    err610 := argvalue1.Read(jsProt609)
    if err610 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.NotifyUpdated(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerWithSnsId":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsId requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SnSIdTyoe(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg616 := flag.Arg(5)
    mbTrans617 := thrift.NewTMemoryBufferLen(len(arg616))
    defer mbTrans617.Close()
    _, err618 := mbTrans617.WriteString(arg616)
    if err618 != nil {
      Usage()
      return
    }
    factory619 := thrift.NewTJSONProtocolFactory()
    jsProt620 := factory619.GetProtocol(mbTrans617)
    argvalue4 := talkservice.NewDeviceInfo()
    err621 := argvalue4.Read(jsProt620)
    if err621 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.RegisterWithSnsId(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "removeFriendRequest":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveFriendRequest requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.Direction(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveFriendRequest(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openAuthSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenAuthSession requires 1 args")
      flag.Usage()
    }
    arg625 := flag.Arg(1)
    mbTrans626 := thrift.NewTMemoryBufferLen(len(arg625))
    defer mbTrans626.Close()
    _, err627 := mbTrans626.WriteString(arg625)
    if err627 != nil {
      Usage()
      return
    }
    factory628 := thrift.NewTJSONProtocolFactory()
    jsProt629 := factory628.GetProtocol(mbTrans626)
    argvalue0 := talkservice.NewAuthSessionRequest()
    err630 := argvalue0.Read(jsProt629)
    if err630 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenAuthSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyQrcodeWithE2EE":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "VerifyQrcodeWithE2EE requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ErrorCode(tmp2)
    value2 := argvalue2
    arg633 := flag.Arg(4)
    mbTrans634 := thrift.NewTMemoryBufferLen(len(arg633))
    defer mbTrans634.Close()
    _, err635 := mbTrans634.WriteString(arg633)
    if err635 != nil {
      Usage()
      return
    }
    factory636 := thrift.NewTJSONProtocolFactory()
    jsProt637 := factory636.GetProtocol(mbTrans634)
    argvalue3 := talkservice.NewE2EEPublicKey()
    err638 := argvalue3.Read(jsProt637)
    if err638 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    argvalue5 := []byte(flag.Arg(6))
    value5 := argvalue5
    fmt.Print(client.VerifyQrcodeWithE2EE(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getBalance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBalance requires 1 args")
      flag.Usage()
    }
    arg641 := flag.Arg(1)
    mbTrans642 := thrift.NewTMemoryBufferLen(len(arg641))
    defer mbTrans642.Close()
    _, err643 := mbTrans642.WriteString(arg641)
    if err643 != nil {
      Usage()
      return
    }
    factory644 := thrift.NewTJSONProtocolFactory()
    jsProt645 := factory644.GetProtocol(mbTrans642)
    argvalue0 := talkservice.NewGetBalanceRequest()
    err646 := argvalue0.Read(jsProt645)
    if err646 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetBalance(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.UpdateNotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "verifyPhoneNumber":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumber requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.VerifyPhoneNumber(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "cancelGroupInvitation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CancelGroupInvitation requires 3 args")
      flag.Usage()
    }
    tmp0, err653 := (strconv.Atoi(flag.Arg(1)))
    if err653 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg655 := flag.Arg(3)
    mbTrans656 := thrift.NewTMemoryBufferLen(len(arg655))
    defer mbTrans656.Close()
    _, err657 := mbTrans656.WriteString(arg655)
    if err657 != nil { 
      Usage()
      return
    }
    factory658 := thrift.NewTJSONProtocolFactory()
    jsProt659 := factory658.GetProtocol(mbTrans656)
    containerStruct2 := talkservice.NewTalkServiceCancelGroupInvitationArgs()
    err660 := containerStruct2.ReadField3(jsProt659)
    if err660 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CancelGroupInvitation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createRoomV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoomV2 requires 2 args")
      flag.Usage()
    }
    tmp0, err661 := (strconv.Atoi(flag.Arg(1)))
    if err661 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg662 := flag.Arg(2)
    mbTrans663 := thrift.NewTMemoryBufferLen(len(arg662))
    defer mbTrans663.Close()
    _, err664 := mbTrans663.WriteString(arg662)
    if err664 != nil { 
      Usage()
      return
    }
    factory665 := thrift.NewTJSONProtocolFactory()
    jsProt666 := factory665.GetProtocol(mbTrans663)
    containerStruct1 := talkservice.NewTalkServiceCreateRoomV2Args()
    err667 := containerStruct1.ReadField2(jsProt666)
    if err667 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoomV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findContactByMetaTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindContactByMetaTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindContactByMetaTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
      flag.Usage()
    }
    arg670 := flag.Arg(1)
    mbTrans671 := thrift.NewTMemoryBufferLen(len(arg670))
    defer mbTrans671.Close()
    _, err672 := mbTrans671.WriteString(arg670)
    if err672 != nil {
      Usage()
      return
    }
    factory673 := thrift.NewTJSONProtocolFactory()
    jsProt674 := factory673.GetProtocol(mbTrans671)
    argvalue0 := talkservice.NewGetChatsRequest()
    err675 := argvalue0.Read(jsProt674)
    if err675 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetChats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupIdsJoined":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetGroupIdsJoined(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRoomsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomsV2 requires 1 args")
      flag.Usage()
    }
    arg676 := flag.Arg(1)
    mbTrans677 := thrift.NewTMemoryBufferLen(len(arg676))
    defer mbTrans677.Close()
    _, err678 := mbTrans677.WriteString(arg676)
    if err678 != nil { 
      Usage()
      return
    }
    factory679 := thrift.NewTJSONProtocolFactory()
    jsProt680 := factory679.GetProtocol(mbTrans677)
    containerStruct0 := talkservice.NewTalkServiceGetRoomsV2Args()
    err681 := containerStruct0.ReadField1(jsProt680)
    if err681 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RoomIds
    value0 := argvalue0
    fmt.Print(client.GetRoomsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reissueChatTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueChatTicket requires 1 args")
      flag.Usage()
    }
    arg682 := flag.Arg(1)
    mbTrans683 := thrift.NewTMemoryBufferLen(len(arg682))
    defer mbTrans683.Close()
    _, err684 := mbTrans683.WriteString(arg682)
    if err684 != nil {
      Usage()
      return
    }
    factory685 := thrift.NewTJSONProtocolFactory()
    jsProt686 := factory685.GetProtocol(mbTrans683)
    argvalue0 := talkservice.NewReissueChatTicketRequest()
    err687 := argvalue0.Read(jsProt686)
    if err687 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReissueChatTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err688 := (strconv.Atoi(flag.Arg(1)))
    if err688 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg689 := flag.Arg(2)
    mbTrans690 := thrift.NewTMemoryBufferLen(len(arg689))
    defer mbTrans690.Close()
    _, err691 := mbTrans690.WriteString(arg689)
    if err691 != nil {
      Usage()
      return
    }
    factory692 := thrift.NewTJSONProtocolFactory()
    jsProt693 := factory692.GetProtocol(mbTrans690)
    argvalue1 := talkservice.NewMessage()
    err694 := argvalue1.Read(jsProt693)
    if err694 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err695 := (strconv.Atoi(flag.Arg(1)))
    if err695 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acquireGroupCallRoute":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AcquireGroupCallRoute requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.MediaType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg699 := flag.Arg(4)
    mbTrans700 := thrift.NewTMemoryBufferLen(len(arg699))
    defer mbTrans700.Close()
    _, err701 := mbTrans700.WriteString(arg699)
    if err701 != nil { 
      Usage()
      return
    }
    factory702 := thrift.NewTJSONProtocolFactory()
    jsProt703 := factory702.GetProtocol(mbTrans700)
    containerStruct3 := talkservice.NewTalkServiceAcquireGroupCallRouteArgs()
    err704 := containerStruct3.ReadField4(jsProt703)
    if err704 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Capabilities
    value3 := argvalue3
    fmt.Print(client.AcquireGroupCallRoute(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "acceptChatInvitationByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitationByTicket requires 1 args")
      flag.Usage()
    }
    arg705 := flag.Arg(1)
    mbTrans706 := thrift.NewTMemoryBufferLen(len(arg705))
    defer mbTrans706.Close()
    _, err707 := mbTrans706.WriteString(arg705)
    if err707 != nil {
      Usage()
      return
    }
    factory708 := thrift.NewTJSONProtocolFactory()
    jsProt709 := factory708.GetProtocol(mbTrans706)
    argvalue0 := talkservice.NewAcceptChatInvitationByTicketRequest()
    err710 := argvalue0.Read(jsProt709)
    if err710 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitationByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err713 := (strconv.Atoi(flag.Arg(2)))
    if err713 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err714 := (strconv.Atoi(flag.Arg(3)))
    if err714 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerDeviceWithIdentityCredential":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithIdentityCredential requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.Provider(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.RegisterDeviceWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "reissueGroupTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueGroupTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ReissueGroupTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateProfileAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttributes requires 2 args")
      flag.Usage()
    }
    tmp0, err720 := (strconv.Atoi(flag.Arg(1)))
    if err720 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg721 := flag.Arg(2)
    mbTrans722 := thrift.NewTMemoryBufferLen(len(arg721))
    defer mbTrans722.Close()
    _, err723 := mbTrans722.WriteString(arg721)
    if err723 != nil {
      Usage()
      return
    }
    factory724 := thrift.NewTJSONProtocolFactory()
    jsProt725 := factory724.GetProtocol(mbTrans722)
    argvalue1 := talkservice.NewUpdateProfileAttributesRequest()
    err726 := argvalue1.Read(jsProt725)
    if err726 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfileAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acceptChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
      flag.Usage()
    }
    arg729 := flag.Arg(1)
    mbTrans730 := thrift.NewTMemoryBufferLen(len(arg729))
    defer mbTrans730.Close()
    _, err731 := mbTrans730.WriteString(arg729)
    if err731 != nil {
      Usage()
      return
    }
    factory732 := thrift.NewTJSONProtocolFactory()
    jsProt733 := factory732.GetProtocol(mbTrans730)
    argvalue0 := talkservice.NewAcceptChatInvitationRequest()
    err734 := argvalue0.Read(jsProt733)
    if err734 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "decryptFollowEMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DecryptFollowEMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DecryptFollowEMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "inviteIntoChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
      flag.Usage()
    }
    arg737 := flag.Arg(1)
    mbTrans738 := thrift.NewTMemoryBufferLen(len(arg737))
    defer mbTrans738.Close()
    _, err739 := mbTrans738.WriteString(arg737)
    if err739 != nil {
      Usage()
      return
    }
    factory740 := thrift.NewTJSONProtocolFactory()
    jsProt741 := factory740.GetProtocol(mbTrans738)
    argvalue0 := talkservice.NewInviteIntoChatRequest()
    err742 := argvalue0.Read(jsProt741)
    if err742 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InviteIntoChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "wakeUpLongPolling":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WakeUpLongPolling requires 1 args")
      flag.Usage()
    }
    argvalue0, err743 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err743 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WakeUpLongPolling(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptGroupInvitationByTicket":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitationByTicket requires 3 args")
      flag.Usage()
    }
    tmp0, err744 := (strconv.Atoi(flag.Arg(1)))
    if err744 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AcceptGroupInvitationByTicket(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteOtherFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
      flag.Usage()
    }
    arg747 := flag.Arg(1)
    mbTrans748 := thrift.NewTMemoryBufferLen(len(arg747))
    defer mbTrans748.Close()
    _, err749 := mbTrans748.WriteString(arg747)
    if err749 != nil {
      Usage()
      return
    }
    factory750 := thrift.NewTJSONProtocolFactory()
    jsProt751 := factory750.GetProtocol(mbTrans748)
    argvalue0 := talkservice.NewDeleteOtherFromChatRequest()
    err752 := argvalue0.Read(jsProt751)
    if err752 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactsByPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
      flag.Usage()
    }
    arg753 := flag.Arg(1)
    mbTrans754 := thrift.NewTMemoryBufferLen(len(arg753))
    defer mbTrans754.Close()
    _, err755 := mbTrans754.WriteString(arg753)
    if err755 != nil { 
      Usage()
      return
    }
    factory756 := thrift.NewTJSONProtocolFactory()
    jsProt757 := factory756.GetProtocol(mbTrans754)
    containerStruct0 := talkservice.NewTalkServiceFindContactsByPhoneArgs()
    err758 := containerStruct0.ReadField1(jsProt757)
    if err758 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Phones
    value0 := argvalue0
    fmt.Print(client.FindContactsByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupsV2 requires 1 args")
      flag.Usage()
    }
    arg759 := flag.Arg(1)
    mbTrans760 := thrift.NewTMemoryBufferLen(len(arg759))
    defer mbTrans760.Close()
    _, err761 := mbTrans760.WriteString(arg759)
    if err761 != nil { 
      Usage()
      return
    }
    factory762 := thrift.NewTJSONProtocolFactory()
    jsProt763 := factory762.GetProtocol(mbTrans760)
    containerStruct0 := talkservice.NewTalkServiceGetGroupsV2Args()
    err764 := containerStruct0.ReadField1(jsProt763)
    if err764 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupId
    value0 := argvalue0
    fmt.Print(client.GetGroupsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroups":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroups requires 1 args")
      flag.Usage()
    }
    arg765 := flag.Arg(1)
    mbTrans766 := thrift.NewTMemoryBufferLen(len(arg765))
    defer mbTrans766.Close()
    _, err767 := mbTrans766.WriteString(arg765)
    if err767 != nil { 
      Usage()
      return
    }
    factory768 := thrift.NewTJSONProtocolFactory()
    jsProt769 := factory768.GetProtocol(mbTrans766)
    containerStruct0 := talkservice.NewTalkServiceGetGroupsArgs()
    err770 := containerStruct0.ReadField1(jsProt769)
    if err770 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupId
    value0 := argvalue0
    fmt.Print(client.GetGroups(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCompactGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupWithoutMembers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupWithoutMembers requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupWithoutMembers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err774 := (strconv.Atoi(flag.Arg(1)))
    if err774 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg776 := flag.Arg(3)
    mbTrans777 := thrift.NewTMemoryBufferLen(len(arg776))
    defer mbTrans777.Close()
    _, err778 := mbTrans777.WriteString(arg776)
    if err778 != nil { 
      Usage()
      return
    }
    factory779 := thrift.NewTJSONProtocolFactory()
    jsProt780 := factory779.GetProtocol(mbTrans777)
    containerStruct2 := talkservice.NewTalkServiceInviteIntoGroupArgs()
    err781 := containerStruct2.ReadField3(jsProt780)
    if err781 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "acceptGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err782 := (strconv.Atoi(flag.Arg(1)))
    if err782 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AcceptGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageReadRange":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageReadRange requires 2 args")
      flag.Usage()
    }
    arg784 := flag.Arg(1)
    mbTrans785 := thrift.NewTMemoryBufferLen(len(arg784))
    defer mbTrans785.Close()
    _, err786 := mbTrans785.WriteString(arg784)
    if err786 != nil { 
      Usage()
      return
    }
    factory787 := thrift.NewTJSONProtocolFactory()
    jsProt788 := factory787.GetProtocol(mbTrans785)
    containerStruct0 := talkservice.NewTalkServiceGetMessageReadRangeArgs()
    err789 := containerStruct0.ReadField1(jsProt788)
    if err789 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatIds
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageReadRange(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSelfFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
      flag.Usage()
    }
    arg790 := flag.Arg(1)
    mbTrans791 := thrift.NewTMemoryBufferLen(len(arg790))
    defer mbTrans791.Close()
    _, err792 := mbTrans791.WriteString(arg790)
    if err792 != nil {
      Usage()
      return
    }
    factory793 := thrift.NewTJSONProtocolFactory()
    jsProt794 := factory793.GetProtocol(mbTrans791)
    argvalue0 := talkservice.NewDeleteSelfFromChatRequest()
    err795 := argvalue0.Read(jsProt794)
    if err795 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes2 requires 1 args")
      flag.Usage()
    }
    arg796 := flag.Arg(1)
    mbTrans797 := thrift.NewTMemoryBufferLen(len(arg796))
    defer mbTrans797.Close()
    _, err798 := mbTrans797.WriteString(arg796)
    if err798 != nil { 
      Usage()
      return
    }
    factory799 := thrift.NewTJSONProtocolFactory()
    jsProt800 := factory799.GetProtocol(mbTrans797)
    containerStruct0 := talkservice.NewTalkServiceGetSettingsAttributes2Args()
    err801 := containerStruct0.ReadField1(jsProt800)
    if err801 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.AttributesToRetrieve
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err802 := (strconv.Atoi(flag.Arg(1)))
    if err802 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg804 := flag.Arg(3)
    mbTrans805 := thrift.NewTMemoryBufferLen(len(arg804))
    defer mbTrans805.Close()
    _, err806 := mbTrans805.WriteString(arg804)
    if err806 != nil { 
      Usage()
      return
    }
    factory807 := thrift.NewTJSONProtocolFactory()
    jsProt808 := factory807.GetProtocol(mbTrans805)
    containerStruct2 := talkservice.NewTalkServiceInviteIntoRoomArgs()
    err809 := containerStruct2.ReadField3(jsProt808)
    if err809 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "rejectChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
      flag.Usage()
    }
    arg810 := flag.Arg(1)
    mbTrans811 := thrift.NewTMemoryBufferLen(len(arg810))
    defer mbTrans811.Close()
    _, err812 := mbTrans811.WriteString(arg810)
    if err812 != nil {
      Usage()
      return
    }
    factory813 := thrift.NewTJSONProtocolFactory()
    jsProt814 := factory813.GetProtocol(mbTrans811)
    argvalue0 := talkservice.NewRejectChatInvitationRequest()
    err815 := argvalue0.Read(jsProt814)
    if err815 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RejectChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateChatRoomBGM":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateChatRoomBGM requires 3 args")
      flag.Usage()
    }
    tmp0, err816 := (strconv.Atoi(flag.Arg(1)))
    if err816 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateChatRoomBGM(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findGroupByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindGroupByTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindGroupByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecentFriendRequests":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecentFriendRequests requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRecentFriendRequests(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes requires 1 args")
      flag.Usage()
    }
    tmp0, err820 := (strconv.Atoi(flag.Arg(1)))
    if err820 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err821 := (strconv.Atoi(flag.Arg(1)))
    if err821 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RejectGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
      flag.Usage()
    }
    arg823 := flag.Arg(1)
    mbTrans824 := thrift.NewTMemoryBufferLen(len(arg823))
    defer mbTrans824.Close()
    _, err825 := mbTrans824.WriteString(arg823)
    if err825 != nil {
      Usage()
      return
    }
    factory826 := thrift.NewTJSONProtocolFactory()
    jsProt827 := factory826.GetProtocol(mbTrans824)
    argvalue0 := talkservice.NewUpdateChatRequest()
    err828 := argvalue0.Read(jsProt827)
    if err828 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes2 requires 3 args")
      flag.Usage()
    }
    tmp0, err829 := (strconv.Atoi(flag.Arg(1)))
    if err829 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg830 := flag.Arg(2)
    mbTrans831 := thrift.NewTMemoryBufferLen(len(arg830))
    defer mbTrans831.Close()
    _, err832 := mbTrans831.WriteString(arg830)
    if err832 != nil { 
      Usage()
      return
    }
    factory833 := thrift.NewTJSONProtocolFactory()
    jsProt834 := factory833.GetProtocol(mbTrans831)
    containerStruct1 := talkservice.NewTalkServiceUpdateSettingsAttributes2Args()
    err835 := containerStruct1.ReadField2(jsProt834)
    if err835 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.AttributesToUpdate
    value1 := argvalue1
    arg836 := flag.Arg(3)
    mbTrans837 := thrift.NewTMemoryBufferLen(len(arg836))
    defer mbTrans837.Close()
    _, err838 := mbTrans837.WriteString(arg836)
    if err838 != nil {
      Usage()
      return
    }
    factory839 := thrift.NewTJSONProtocolFactory()
    jsProt840 := factory839.GetProtocol(mbTrans837)
    argvalue2 := talkservice.NewSettings()
    err841 := argvalue2.Read(jsProt840)
    if err841 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getContactRegistration":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetContactRegistration requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.MIDType(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetContactRegistration(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "noop":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Noop requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Noop(context.Background()))
    fmt.Print("\n")
    break
  case "removeAllMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
      flag.Usage()
    }
    tmp0, err843 := (strconv.Atoi(flag.Arg(1)))
    if err843 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveAllMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err845 := (strconv.Atoi(flag.Arg(1)))
    if err845 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ContactFlag(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getGroupCall":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupCall requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupCall(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err849 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err849 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err850 := (strconv.Atoi(flag.Arg(2)))
    if err850 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err851 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err851 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err852 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err852 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "fetchOperations":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
      flag.Usage()
    }
    argvalue0, err853 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err853 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err854 := (strconv.Atoi(flag.Arg(2)))
    if err854 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchOperations(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "kickoutFromGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KickoutFromGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err855 := (strconv.Atoi(flag.Arg(1)))
    if err855 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg857 := flag.Arg(3)
    mbTrans858 := thrift.NewTMemoryBufferLen(len(arg857))
    defer mbTrans858.Close()
    _, err859 := mbTrans858.WriteString(arg857)
    if err859 != nil { 
      Usage()
      return
    }
    factory860 := thrift.NewTJSONProtocolFactory()
    jsProt861 := factory860.GetProtocol(mbTrans858)
    containerStruct2 := talkservice.NewTalkServiceKickoutFromGroupArgs()
    err862 := containerStruct2.ReadField3(jsProt861)
    if err862 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.KickoutFromGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getExtendedProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetExtendedProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetExtendedProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.FeatureType(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChatRoomAnnouncement":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CreateChatRoomAnnouncement requires 4 args")
      flag.Usage()
    }
    tmp0, err863 := (strconv.Atoi(flag.Arg(1)))
    if err863 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ChatRoomAnnouncementType(tmp2)
    value2 := argvalue2
    arg865 := flag.Arg(4)
    mbTrans866 := thrift.NewTMemoryBufferLen(len(arg865))
    defer mbTrans866.Close()
    _, err867 := mbTrans866.WriteString(arg865)
    if err867 != nil {
      Usage()
      return
    }
    factory868 := thrift.NewTJSONProtocolFactory()
    jsProt869 := factory868.GetProtocol(mbTrans866)
    argvalue3 := talkservice.NewChatRoomAnnouncementContents()
    err870 := argvalue3.Read(jsProt869)
    if err870 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.CreateChatRoomAnnouncement(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactByMetaTag":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactByMetaTag requires 3 args")
      flag.Usage()
    }
    tmp0, err871 := (strconv.Atoi(flag.Arg(1)))
    if err871 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactByMetaTag(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "follow":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Follow requires 1 args")
      flag.Usage()
    }
    arg874 := flag.Arg(1)
    mbTrans875 := thrift.NewTMemoryBufferLen(len(arg874))
    defer mbTrans875.Close()
    _, err876 := mbTrans875.WriteString(arg874)
    if err876 != nil {
      Usage()
      return
    }
    factory877 := thrift.NewTJSONProtocolFactory()
    jsProt878 := factory877.GetProtocol(mbTrans875)
    argvalue0 := talkservice.NewFollowRequest()
    err879 := argvalue0.Read(jsProt878)
    if err879 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Follow(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "leaveGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err881 := (strconv.Atoi(flag.Arg(1)))
    if err881 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
      flag.Usage()
    }
    tmp0, err883 := (strconv.Atoi(flag.Arg(1)))
    if err883 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err886 := (strconv.Atoi(flag.Arg(4)))
    if err886 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateIdentifier":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateIdentifier requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg888 := flag.Arg(2)
    mbTrans889 := thrift.NewTMemoryBufferLen(len(arg888))
    defer mbTrans889.Close()
    _, err890 := mbTrans889.WriteString(arg888)
    if err890 != nil {
      Usage()
      return
    }
    factory891 := thrift.NewTJSONProtocolFactory()
    jsProt892 := factory891.GetProtocol(mbTrans889)
    argvalue1 := talkservice.NewIdentityCredentialRequest()
    err893 := argvalue1.Read(jsProt892)
    if err893 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateIdentifier(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
